%%% This script is used to review the dynamic simulations that were run on
%%% the cluster, for genes that are simulated well at 0 minutes and their 2
%%% hour state is different than theit 0 minute state.

load('C:\Users\Daniel\Documents\MATLAB\Friedman Lab\Experiment Data\sequences_structure.mat')
load('C:\Users\Daniel\Documents\MATLAB\nuc_simulator\clustering\gene_params.mat')

%save([results_path 'dynamic_results_' num2str(Gene_id)] , ...
%	'data_matrix', 'nuc_sum_matrix', 'timeExpansion', 'timeExpansions', 'costPerTimeExpansion');

genlen = 3500;
TSS = fix(genlen/2);
NFR_pos = [TSS-299 : TSS+150];

timeCoefficients = zeros(1,length(gene_params));
for i=1:length(gene_params)

    gene_id = gene_params(i,1);
    load('C:\Users\Daniel\Documents\MATLAB\nuc_simulator\clustering\experiment_data\sth1_0m_centers.mat')
    
    try
        load(['C:\Users\Daniel\Documents\MATLAB\Friedman Lab\results\dynamic_genome_results\dynamic_results_' num2str(gene_id) '.mat'])
    catch a
        continue
    end
    
    %%% Keep track of the time expansions:
    timeCoefficients(i) = timeExpansion;

    %%% Test whether the time expansions converge to a value:
    %{
    figure;
    plot(timeExpansions, costPerTimeExpansion, 'sb')
    xlabel('Time Expansion Coefficient')
    ylabel('Total Cost')
    title(['Time Expansion Convergence - Gene ' num2str(gene_id)])
    %}
    
    %%% Look at the state at 0m and at 2h for each gene:
    seq = sequences_structure(gene_id,:);
    [ PolyA_Sites, PolyT_Sites, REB1_Sites, ABF1_Sites, RAP1_Sites ] = ...
        Extract_Sites_From_Gene(seq, genlen);
    figure;
    subplot(2,1,1)
    plot(data_matrix(1,:),'b')
    hold on
    plot(nuc_sum_matrix(1,:) .* sum(data_matrix(1,:)) ./ sum(nuc_sum_matrix(1,:)),'r')
    subplot(2,1,2)
    plot(data_matrix(end,:),'b')
    hold on
    plot(nuc_sum_matrix(end,:) .* sum(data_matrix(end,:)) ./ sum(nuc_sum_matrix(end,:)),'r')
    title(['sim-experiment states for 0 minutes and 2 hours - gene ' num2str(gene_id)])
    
    
    seq = sequences_structure(gene_id,:);
    wt =  create_gene_buffer(data(gene_id,:),genlen);
    
    [ PolyA_Sites, PolyT_Sites, REB1_Sites, ABF1_Sites, RAP1_Sites ] = ...
        Extract_Sites_From_Gene(seq, genlen);

    nuc_sum = nuc_sum_likelihood;
    best_sim = Compare_Sum_To_Data(nuc_sum, wt, NFR_pos, true);

    data = conv(wt(NFR_pos), gausswin(10)./sum(gausswin(10)), 'same');
    nuc_sum = conv(nuc_sum, gausswin(10)./sum(gausswin(10)), 'same');
    nuc_sum = nuc_sum(NFR_pos) .* sum(data) ./ sum(nuc_sum(NFR_pos));
    
    figure;
    subplot(2,1,1);
    plot(data, 'b')
    hold on
    plot(nuc_sum, 'r')
    plot(PolyA_Sites(NFR_pos), 'k')
    plot(PolyT_Sites(NFR_pos), 'm')
    legend('sth1_0m','simulation','PolyA', 'PolyT')
    xlabel('Position (TSS at 300)')
    ylabel('Nucleosome Intensity (0m)')
    title(['Gene ' num2str(gene_id) ' 0 minutes' char(10) 'Likelihood Ratio = ' num2str(best_ratio)])
    
    optimal_0m(i) = best_likelihood_index;
    
    load('C:\Users\Daniel\Documents\MATLAB\nuc_simulator\clustering\experiment_data\sth1_6h_centers.mat')
    try
        load(['C:\Users\Daniel\Documents\MATLAB\Friedman Lab\results\dynamic_results_2\results_6h_' num2str(gene_id) '.mat'])
    catch a
        continue
    end
    
    wt =  create_gene_buffer(data(gene_id,:),genlen);

    [ PolyA_Sites, PolyT_Sites, REB1_Sites, ABF1_Sites, RAP1_Sites ] = ...
        Extract_Sites_From_Gene(seq, genlen);

    nuc_sum = nuc_sum_likelihood;
    best_sim = Compare_Sum_To_Data(nuc_sum, wt, NFR_pos, true);

    exp_data = conv(wt(NFR_pos), gausswin(10)./sum(gausswin(10)), 'same');
    nuc_sum = conv(nuc_sum, gausswin(10)./sum(gausswin(10)), 'same');
    nuc_sum = nuc_sum(NFR_pos) .* sum(exp_data) ./ sum(nuc_sum(NFR_pos));
        
    subplot(2,1,2);
    plot(exp_data, 'b')
    hold on
    plot(nuc_sum, 'r')
    plot(PolyA_Sites(NFR_pos), 'k')
    plot(PolyT_Sites(NFR_pos), 'm')
    legend('sth1_6h','simulation','PolyA', 'PolyT')
    xlabel('Position (TSS at 300)')
    ylabel('Nucleosome Intensity (6h)')
    title(['Gene ' num2str(gene_id) ' 6 hours' char(10) 'Likelihood Ratio = ' num2str(best_ratio)])

    optimal_6h(i) = best_likelihood_index;

end


